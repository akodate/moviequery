// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var MoviePanel;

  this.movieApp = angular.module('movieApp', []);

  MoviePanel = (function() {
    function MoviePanel($scope, $http) {
      var searchNum;
      this.$scope = $scope;
      this.$http = $http;
      $scope.searchInput = "";
      $scope.dropDownInvisible = true;
      $scope.movieInfoInvisible = true;
      searchNum = 0;
      $scope.movieList = [];
      $scope.keyPress = function(event) {
        switch (event.which) {
          case 40:
            $('.' + searchNum).removeClass('hover');
            searchNum += 1;
            if (searchNum > $scope.movieList.length) {
              searchNum = 0;
            }
            $('.' + searchNum).addClass('hover');
            break;
          case 38:
            $('.' + searchNum).removeClass('hover');
            searchNum -= 1;
            if (searchNum < 0) {
              searchNum = $scope.movieList.length;
            }
            $('.' + searchNum).addClass('hover');
            break;
          case 13:
            debugger;
            if (searchNum === 0) {
              return $scope.searchPick($scope.searchInput, 'basic');
            } else {
              return $scope.searchPick($scope.movieList[searchNum - 1], 'advanced');
            }
        }
      };
      $scope.mouseOn = function(event, num) {
        console.log(event);
        console.log("Testing " + event.fromElement.localName);
        console.log(num);
        if (num) {
          $('.' + searchNum).removeClass('hover');
          searchNum = num;
        }
        $('.' + searchNum).addClass('hover');
      };
      $scope.mouseOff = function(event, num) {
        console.log(event);
        console.log("Testing " + event.fromElement.localName);
        console.log(num);
        if (num) {
          searchNum = num;
        }
        $('.' + searchNum).removeClass('hover');
      };
      $scope.search = function() {
        var results, searchTerm;
        if ($scope.searchInput) {
          $scope.movieList = [];
          $scope.dropDownInvisible = true;
          searchNum = 0;
          searchTerm = $scope.searchInput;
          $http({
            url: "http://www.omdbapi.com/",
            method: "get",
            params: {
              s: searchTerm
            }
          }).success(function(data, status, headers, config) {
            console.log("data: " + data + "status: " + status + "headers:" + headers + "config: " + config);
            return results(data);
          }).error(function(data, status, headers, config) {
            return $scope.status = status;
          });
          return results = function(data) {
            var movie, movieNum, _i, _len, _ref, _results;
            $scope.loadingGif = true;
            if (data.Response !== 'False') {
              $scope.movieList = [];
              $scope.dropDownInvisible = false;
              movieNum = 1;
              _ref = data["Search"];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                movie = _ref[_i];
                movie.Num = movieNum;
                $scope.movieList.push(movie);
                _results.push(movieNum += 1);
              }
              return _results;
            }
          };
        }
      };
      $scope.searchPick = function(movie, mode) {
        var imdbInfo, para;
        console.log(movie + "TEST" + mode);
        $scope.movieInfo = {};
        $scope.dropDownInvisible = true;
        $scope.movieInfoInvisible = false;
        if (mode === 'basic') {
          para = {
            s: movie
          };
        } else {
          para = {
            i: movie.imdbID,
            plot: 'full'
          };
        }
        $http({
          url: "http://www.omdbapi.com/",
          method: "get",
          params: para
        }).success(function(data, status, headers, config) {
          console.log("data: " + data + "status: " + status + "headers:" + headers + "config: " + config + "imdbID: " + movie.imdbID);
          if (mode === 'basic') {
            console.log('Basic route: ' + data['Search'][0]);
            debugger;
            return imdbInfo(data['Search'][0]);
          } else {
            return imdbInfo(data);
          }
        }).error(function(data, status, headers, config) {
          return $scope.status = status;
        });
        return imdbInfo = function(data) {
          var info, key, _results;
          _results = [];
          for (key in data) {
            info = data[key];
            _results.push($scope.movieInfo[key] = info);
          }
          return _results;
        };
      };
      $scope.infoFilter = function(mInfo) {
        var info, key;
        if (mInfo) {
          $scope.arr = {};
          for (key in mInfo) {
            info = mInfo[key];
            if (key !== 'Poster' && key !== 'Title' && key !== 'imdbID' && key !== 'Response' && key !== 'Release' && key !== null) {
              if (key === 'imdbRating' || key === 'imdbVotes') {
                key = key.slice(0, 4).toUpperCase() + ' ' + key.slice(4);
              }
              if (key === 'Type') {
                info = info[0].toUpperCase();
              }
              $scope.arr[key] = info;
            }
          }
          return $scope.arr;
        }
      };
    }

    return MoviePanel;

  })();

  MoviePanel.$inject = ["$scope", "$http"];

  movieApp.controller("MoviePanel", MoviePanel);

}).call(this);
